import { defineContentScript } from 'wxt/sandbox';
import { browser } from 'wxt/browser';

export default defineContentScript({
  matches: [
    'https://map.naver.com/*',
    'https://map.kakao.com/*',
    'https://www.google.com/maps/*',
    'https://maps.google.com/*'
  ],
  runAt: 'document_idle',
  main() {
    console.log('ÌååÌÇπ Ìó¨Ìçº ÏΩòÌÖêÏ∏† Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÎìúÎê®');

    let currentMapService: string = '';
    let currentPlaceId: string | null = null;
    let currentPlaceData: any = null;
    let uiInjected = false;

    // ÌòÑÏû¨ ÏßÄÎèÑ ÏÑúÎπÑÏä§ Í∞êÏßÄ
    function detectMapService(): string {
      const hostname = window.location.hostname;
      
      if (hostname.includes('map.naver.com')) {
        return 'naver';
      } else if (hostname.includes('map.kakao.com')) {
        return 'kakao';
      } else if (hostname.includes('google.com')) {
        return 'google';
      }
      
      return '';
    }

    // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÏóêÏÑú Ïû•ÏÜå ID Ï∂îÏ∂ú
    function extractNaverPlaceId(): string | null {
      console.log('ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ URL:', window.location.href);
      
      // URLÏóêÏÑú place ID Ï∂îÏ∂ú ÏãúÎèÑ
      // Ïòà: https://map.naver.com/p/search/Ï£ºÏ∞®Ïû•/place/1234567890
      const pathMatch = window.location.pathname.match(/\/place\/(\d+)/);
      if (pathMatch) {
        console.log('ÎÑ§Ïù¥Î≤Ñ Ïû•ÏÜå ID Î∞úÍ≤¨ (Í≤ΩÎ°ú):', pathMatch[1]);
        return pathMatch[1];
      }
      
      // entry Ìå®ÌÑ¥ ÌôïÏù∏
      // Ïòà: https://map.naver.com/p/entry/place/1234567890
      const entryMatch = window.location.pathname.match(/\/entry\/place\/(\d+)/);
      if (entryMatch) {
        console.log('ÎÑ§Ïù¥Î≤Ñ Ïû•ÏÜå ID Î∞úÍ≤¨ (entry):', entryMatch[1]);
        return entryMatch[1];
      }
      
      // search Ìå®ÌÑ¥ ÌôïÏù∏
      const searchMatch = window.location.pathname.match(/\/search\/[^\/]+\/place\/(\d+)/);
      if (searchMatch) {
        console.log('ÎÑ§Ïù¥Î≤Ñ Ïû•ÏÜå ID Î∞úÍ≤¨ (search):', searchMatch[1]);
        return searchMatch[1];
      }
      
      console.log('ÎÑ§Ïù¥Î≤Ñ Ïû•ÏÜå IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
      return null;
    }

    // Ïπ¥Ïπ¥Ïò§ ÏßÄÎèÑÏóêÏÑú Ïû•ÏÜå ID Ï∂îÏ∂ú
    function extractKakaoPlaceId(): string | null {
      const pathMatch = window.location.pathname.match(/\/(\d+)$/);
      if (pathMatch) {
        return pathMatch[1];
      }
      
      return null;
    }

    // Íµ¨Í∏Ä ÏßÄÎèÑÏóêÏÑú Ïû•ÏÜå ID Ï∂îÏ∂ú
    function extractGooglePlaceId(): string | null {
      const pathMatch = window.location.pathname.match(/place\/([^\/]+)/);
      if (pathMatch) {
        return pathMatch[1];
      }
      
      // Îç∞Ïù¥ÌÑ∞ ÏÜçÏÑ±ÏóêÏÑú Ï∂îÏ∂ú ÏãúÎèÑ
      const placeElement = document.querySelector('[data-placeid]');
      if (placeElement) {
        return placeElement.getAttribute('data-placeid');
      }
      
      return null;
    }

    // ÌòÑÏû¨ Ïû•ÏÜå ID Ï∂îÏ∂ú
    function extractPlaceId(): string | null {
      switch (currentMapService) {
        case 'naver':
          return extractNaverPlaceId();
        case 'kakao':
          return extractKakaoPlaceId();
        case 'google':
          return extractGooglePlaceId();
        default:
          return null;
      }
    }
    
    // Ïû•ÏÜåÎ™Ö Ï∂îÏ∂ú
    function extractPlaceName(): string {
      if (currentMapService === 'naver') {
        // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÏóêÏÑú Ïû•ÏÜåÎ™Ö Ï∂îÏ∂ú - 2024ÎÖÑ ÏµúÏã† ÏÑ†ÌÉùÏûêÎì§
        const selectors = [
          '#_title > span:first-child',     // ÏµúÏã† ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ UI
          '#_title span.GHAhO',              // Ïû•ÏÜå ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ
          '.place_bluelink',                 // Í∏∞Î≥∏ Ïû•ÏÜå ÎßÅÌÅ¨
          '.title_text',                     // Ï†úÎ™© ÌÖçÏä§Ìä∏  
          'span.YouOG',                      // ÏÉà UI Ïû•ÏÜåÎ™Ö
          '.Fc1rA',                          // Ìó§Îçî Ïû•ÏÜåÎ™Ö
          '.LDgIH',                          // Ïû•ÏÜå Ï†úÎ™©
          '[class*="place_name"]',          // place_name Ìè¨Ìï® ÌÅ¥ÎûòÏä§
          '.place_section_content h1',       // ÏÑπÏÖò ÎÇ¥ h1
          '.place_section_content h2',       // ÏÑπÏÖò ÎÇ¥ h2
        ];
        
        for (const selector of selectors) {
          try {
            const nameEl = document.querySelector(selector);
            if (nameEl?.textContent?.trim()) {
              const placeName = nameEl.textContent.trim();
              if (!placeName.includes('Î°úÎî©') && !placeName.includes('...') && placeName.length > 1) {
                console.log(`ÎÑ§Ïù¥Î≤Ñ Ïû•ÏÜåÎ™Ö Ï∞æÏùå (${selector}):`, placeName);
                return placeName;
              }
            }
          } catch (e) {
            // ÏÑ†ÌÉùÏûê ÏóêÎü¨ Î¨¥Ïãú
          }
        }
        
        // Î™®Îì† h1, h2 ÌÉúÍ∑∏ Í≤ÄÏÇ¨ (fallback)
        const headings = document.querySelectorAll('h1, h2');
        for (const heading of headings) {
          const text = heading.textContent?.trim();
          if (text && text.length > 1 && text.length < 50 && 
              !text.includes('Î°úÎî©') && !text.includes('...')) {
            console.log(`ÎÑ§Ïù¥Î≤Ñ Ïû•ÏÜåÎ™Ö Ï∞æÏùå (heading fallback):`, text);
            return text;
          }
        }
        
        console.log('ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÏóêÏÑú Ïû•ÏÜåÎ™ÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå');
        return '';
      } else if (currentMapService === 'kakao') {
        // Ïπ¥Ïπ¥Ïò§ÎßµÏóêÏÑú Ïû•ÏÜåÎ™Ö Ï∂îÏ∂ú
        const nameEl = document.querySelector('.link_name') ||
                       document.querySelector('.tit_location');
        return nameEl?.textContent?.trim() || '';
      } else if (currentMapService === 'google') {
        // Íµ¨Í∏Ä ÏßÄÎèÑÏóêÏÑú Ïû•ÏÜåÎ™Ö Ï∂îÏ∂ú
        const nameEl = document.querySelector('h1[class*="fontHeadlineLarge"]') ||
                       document.querySelector('[class*="place-name"]');
        return nameEl?.textContent?.trim() || '';
      }
      return '';
    }
    
    // Ï£ºÏÜå Ï∂îÏ∂ú
    function extractPlaceAddress(): string {
      if (currentMapService === 'naver') {
        // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÏóêÏÑú Ï£ºÏÜå Ï∂îÏ∂ú
        const addrEl = document.querySelector('.addr') || 
                       document.querySelector('[class*="address"]');
        return addrEl?.textContent?.trim() || '';
      } else if (currentMapService === 'kakao') {
        // Ïπ¥Ïπ¥Ïò§ÎßµÏóêÏÑú Ï£ºÏÜå Ï∂îÏ∂ú
        const addrEl = document.querySelector('.txt_address') ||
                       document.querySelector('.addr');
        return addrEl?.textContent?.trim() || '';
      } else if (currentMapService === 'google') {
        // Íµ¨Í∏Ä ÏßÄÎèÑÏóêÏÑú Ï£ºÏÜå Ï∂îÏ∂ú
        const addrEl = document.querySelector('[data-item-id*="address"]') ||
                       document.querySelector('[class*="fontBodyMedium"]');
        return addrEl?.textContent?.trim() || '';
      }
      return '';
    }

    // UI Ìå®ÎÑê ÏÉùÏÑ±
    function createParkingPanel() {
      if (uiInjected) return;
      
      const panel = document.createElement('div');
      panel.id = 'parking-helper-panel';
      panel.className = 'parking-helper-panel';
      panel.innerHTML = `
        <div class="ph-header">
          <h2>üöó ÌååÌÇπ Ìó¨Ìçº</h2>
          <button class="ph-close">‚úï</button>
        </div>
        <div class="ph-content">
          <div class="ph-loading">
            Ï£ºÏ∞® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
          </div>
        </div>
      `;
      
      // Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
      const style = document.createElement('style');
      style.textContent = `
        .parking-helper-panel {
          position: fixed;
          right: 20px;
          top: 100px;
          width: 320px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 20px rgba(0,0,0,0.1);
          z-index: 10000;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
          overflow: hidden;
          transition: transform 0.3s ease;
        }
        
        .parking-helper-panel.collapsed {
          transform: translateX(340px);
        }
        
        .ph-header {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          padding: 16px;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        
        .ph-header h2 {
          margin: 0;
          font-size: 18px;
          font-weight: 600;
        }
        
        .ph-close {
          background: transparent;
          border: none;
          color: white;
          font-size: 20px;
          cursor: pointer;
          padding: 0;
          width: 30px;
          height: 30px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 4px;
          transition: background 0.2s;
        }
        
        .ph-close:hover {
          background: rgba(255,255,255,0.2);
        }
        
        .ph-content {
          padding: 16px;
          max-height: 500px;
          overflow-y: auto;
        }
        
        .ph-loading {
          text-align: center;
          padding: 40px 20px;
          color: #666;
        }
        
        .ph-section {
          margin-bottom: 20px;
        }
        
        .ph-section h3 {
          font-size: 16px;
          margin: 0 0 12px 0;
          color: #333;
          font-weight: 600;
        }
        
        .ph-review {
          background: #f8f9fa;
          border-radius: 8px;
          padding: 12px;
          margin-bottom: 8px;
        }
        
        .ph-review-header {
          display: flex;
          justify-content: space-between;
          margin-bottom: 8px;
        }
        
        .ph-review-author {
          font-weight: 500;
          color: #333;
        }
        
        .ph-review-rating {
          color: #ffa500;
        }
        
        .ph-review-content {
          color: #666;
          font-size: 14px;
          line-height: 1.5;
        }
        
        .ph-tip {
          display: flex;
          align-items: start;
          padding: 10px;
          background: #fff3cd;
          border-radius: 8px;
          margin-bottom: 8px;
        }
        
        .ph-tip-icon {
          margin-right: 10px;
          font-size: 20px;
        }
        
        .ph-tip-content {
          flex: 1;
          font-size: 14px;
          color: #856404;
        }
        
        .ph-empty {
          text-align: center;
          padding: 30px;
          color: #999;
        }
        
        .ph-error {
          background: #f8d7da;
          color: #721c24;
          padding: 12px;
          border-radius: 8px;
          font-size: 14px;
        }
      `;
      
      document.head.appendChild(style);
      document.body.appendChild(panel);
      
      // Îã´Í∏∞ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
      const closeBtn = panel.querySelector('.ph-close');
      closeBtn?.addEventListener('click', () => {
        panel.classList.add('collapsed');
      });
      
      uiInjected = true;
    }

    // Ìå®ÎÑê ÏΩòÌÖêÏ∏† ÏóÖÎç∞Ïù¥Ìä∏
    function updatePanelContent(data: any) {
      const contentDiv = document.querySelector('.ph-content');
      if (!contentDiv) return;
      
      if (!data || (!data.reviews && !data.tips)) {
        contentDiv.innerHTML = `
          <div class="ph-empty">
            <p>üÖøÔ∏è</p>
            <p>ÏïÑÏßÅ Ïù¥ Ïû•ÏÜåÏóê ÎåÄÌïú<br>Ï£ºÏ∞® Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§</p>
          </div>
        `;
        return;
      }
      
      let html = '';
      
      // Î¶¨Î∑∞ ÏÑπÏÖò
      if (data.reviews && data.reviews.length > 0) {
        html += '<div class="ph-section">';
        html += '<h3>Ï£ºÏ∞® Î¶¨Î∑∞</h3>';
        
        data.reviews.forEach((review: any) => {
          html += `
            <div class="ph-review">
              <div class="ph-review-header">
                <span class="ph-review-author">${review.author || 'ÏùµÎ™Ö'}</span>
                <span class="ph-review-rating">${'‚òÖ'.repeat(review.rating || 0)}</span>
              </div>
              <div class="ph-review-content">${review.content}</div>
            </div>
          `;
        });
        
        html += '</div>';
      }
      
      // ÌåÅ ÏÑπÏÖò
      if (data.tips && data.tips.length > 0) {
        html += '<div class="ph-section">';
        html += '<h3>Ï£ºÏ∞® ÍøÄÌåÅ</h3>';
        
        data.tips.forEach((tip: any) => {
          html += `
            <div class="ph-tip">
              <span class="ph-tip-icon">üí°</span>
              <div class="ph-tip-content">${tip.content}</div>
            </div>
          `;
        });
        
        html += '</div>';
      }
      
      contentDiv.innerHTML = html;
    }

    // Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    async function fetchParkingData(placeId: string) {
      try {
        // Î∞±Í∑∏ÎùºÏö¥Îìú Ïä§ÌÅ¨Î¶ΩÌä∏Ïóê Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠
        const response = await browser.runtime.sendMessage({
          type: 'GET_DATA',
          placeId: placeId
        });
        
        if (response.success) {
          // Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞Î•º currentPlaceDataÏóê Ï†ÄÏû•
          if (response.data) {
            currentPlaceData = {
              ...currentPlaceData,
              reviewCount: response.data.reviewCount || 0,
              tipCount: response.data.tipCount || 0,
              rating: response.data.rating || '-'
            };
          }
          updatePanelContent(response.data);
        } else {
          console.error('Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', response.error);
          updatePanelContent(null);
        }
      } catch (error) {
        console.error('Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ïã§Ìå®:', error);
        updatePanelContent(null);
      }
    }

    // URL Î≥ÄÍ≤Ω Í∞êÏßÄ
    function detectUrlChange() {
      const newPlaceId = extractPlaceId();
      
      if (newPlaceId !== currentPlaceId) {
        currentPlaceId = newPlaceId;
        
        if (currentPlaceId) {
          console.log('Ïû•ÏÜå Í∞êÏßÄ:', currentPlaceId);
          
          // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÎäî ÏßÄÏó∞ Ï≤òÎ¶¨
          const extractPlaceInfo = () => {
            currentPlaceData = {
              name: extractPlaceName(),
              address: extractPlaceAddress(),
              reviewCount: 0,
              tipCount: 0,
              rating: '-'
            };
            
            // Ïû•ÏÜåÎ™ÖÏù¥ ÏóÜÏúºÎ©¥ Ïû¨ÏãúÎèÑ
            if (!currentPlaceData.name && currentMapService === 'naver') {
              let retryCount = 0;
              const maxRetries = 3;
              
              const retryExtraction = () => {
                retryCount++;
                const retryName = extractPlaceName();
                const retryAddress = extractPlaceAddress();
                
                if (retryName && retryName !== 'Ïû•ÏÜåÎ™Ö ÏóÜÏùå') {
                  console.log(`Ïû¨ÏãúÎèÑ ${retryCount}Î≤àÏß∏Î°ú Ïû•ÏÜåÎ™Ö Ï∞æÏùå:`, retryName);
                  currentPlaceData = {
                    ...currentPlaceData,
                    name: retryName,
                    address: retryAddress || currentPlaceData.address
                  };
                } else if (retryCount < maxRetries) {
                  console.log(`Ïû•ÏÜåÎ™Ö Ï∂îÏ∂ú Ïû¨ÏãúÎèÑ ${retryCount}/${maxRetries}...`);
                  setTimeout(retryExtraction, 1000 * retryCount);
                } else {
                  console.log('Ïû•ÏÜåÎ™ÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå - ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º');
                }
              };
              
              setTimeout(retryExtraction, 1000);
            }
          };
          
          // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÎäî ÏßÄÏó∞ Ïã§Ìñâ
          if (currentMapService === 'naver') {
            setTimeout(extractPlaceInfo, 500);
          } else {
            extractPlaceInfo();
          }
          
          // UI Ìå®ÎÑêÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
          if (!uiInjected) {
            createParkingPanel();
          }
          
          // Ìå®ÎÑê ÌëúÏãú
          const panel = document.getElementById('parking-helper-panel');
          if (panel) {
            panel.classList.remove('collapsed');
          }
          
          // Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
          fetchParkingData(currentPlaceId);
          
          // Î∞±Í∑∏ÎùºÏö¥Îìú Ïä§ÌÅ¨Î¶ΩÌä∏Ïóê ÏïåÎ¶º
          browser.runtime.sendMessage({
            type: 'PLACE_DETECTED',
            place: {
              id: currentPlaceId,
              service: currentMapService,
              url: window.location.href
            }
          });
        }
      }
    }

    // Ï¥àÍ∏∞Ìôî
    function init() {
      currentMapService = detectMapService();
      
      if (!currentMapService) {
        console.log('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÏßÄÎèÑ ÏÑúÎπÑÏä§');
        return;
      }
      
      console.log('ÏßÄÎèÑ ÏÑúÎπÑÏä§ Í∞êÏßÄ:', currentMapService);
      
      // URL Î≥ÄÍ≤Ω Í∞êÏßÄ ÏÑ§Ï†ï
      detectUrlChange();
      
      // pushState/replaceState Í∞êÏßÄ
      const originalPushState = history.pushState;
      const originalReplaceState = history.replaceState;
      
      history.pushState = function(...args) {
        originalPushState.apply(history, args);
        setTimeout(detectUrlChange, 100);
      };
      
      history.replaceState = function(...args) {
        originalReplaceState.apply(history, args);
        setTimeout(detectUrlChange, 100);
      };
      
      // popstate Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
      window.addEventListener('popstate', detectUrlChange);
      
      // DOM Î≥ÄÍ≤Ω Í∞êÏßÄ (SPA ÎåÄÏùë) - Îçî Ìö®Ïú®Ï†ÅÏúºÎ°ú Í∞úÏÑ†
      let observerTimer: any = null;
      const observer = new MutationObserver(() => {
        // ÎÑàÎ¨¥ ÏûêÏ£º Ïã§ÌñâÎêòÏßÄ ÏïäÎèÑÎ°ù ÎîîÎ∞îÏö¥Ïä§ Ï†ÅÏö©
        if (observerTimer) clearTimeout(observerTimer);
        observerTimer = setTimeout(() => {
          detectUrlChange();
        }, 500);
      });
      
      // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÎäî ÌäπÏ†ï Ïª®ÌÖåÏù¥ÎÑàÎßå Í¥ÄÏ∞∞
      if (currentMapService === 'naver') {
        // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÍ∞Ä ÏôÑÏ†ÑÌûà Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
        const waitForNaverMap = setInterval(() => {
          const mapContainer = document.querySelector('#app') || document.querySelector('#container');
          if (mapContainer) {
            clearInterval(waitForNaverMap);
            observer.observe(mapContainer, {
              childList: true,
              subtree: false,  // subtreeÎ•º falseÎ°ú ÌïòÏó¨ ÏÑ±Îä• Í∞úÏÑ†
              attributes: false,
              characterData: false
            });
          }
        }, 1000);
      } else {
        // Îã§Î•∏ ÏßÄÎèÑ ÏÑúÎπÑÏä§Îäî Í∏∞Ï°¥ Î∞©Ïãù ÏÇ¨Ïö©
        observer.observe(document.body, {
          childList: true,
          subtree: true,
          attributes: false,
          characterData: false
        });
      }
    }

    // Î∞±Í∑∏ÎùºÏö¥Îìú Ïä§ÌÅ¨Î¶ΩÌä∏Î°úÎ∂ÄÌÑ∞ Î©îÏãúÏßÄ ÏàòÏã†
    browser.runtime.onMessage.addListener((request, _sender, sendResponse) => {
      if (request.type === 'MAP_DETECTED') {
        console.log('ÏßÄÎèÑ Í∞êÏßÄ Î©îÏãúÏßÄ ÏàòÏã†');
        detectUrlChange();
      } else if (request.type === 'FETCH_PLACE_DATA') {
        if (request.place && request.place.id) {
          fetchParkingData(request.place.id);
        }
      } else if (request.type === 'GET_CURRENT_PLACE') {
        // ÌåùÏóÖÏóêÏÑú ÌòÑÏû¨ Ïû•ÏÜå Ï†ïÎ≥¥ ÏöîÏ≤≠
        if (currentPlaceId && currentPlaceData) {
          sendResponse({ 
            place: {
              id: currentPlaceId,
              name: currentPlaceData.name || 'Ïû•ÏÜåÎ™Ö ÏóÜÏùå',
              address: currentPlaceData.address || 'Ï£ºÏÜå ÏóÜÏùå',
              reviewCount: currentPlaceData.reviewCount || 0,
              tipCount: currentPlaceData.tipCount || 0,
              rating: currentPlaceData.rating || '-'
            }
          });
        } else {
          sendResponse({ place: null });
        }
        return true;
      } else if (request.type === 'SHOW_PARKING_DETAILS') {
        // ÌåùÏóÖÏóêÏÑú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú ÏöîÏ≤≠
        console.log('ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú ÏöîÏ≤≠ Î∞õÏùå');
        if (!uiInjected) {
          createParkingPanel();
        }
        const panel = document.getElementById('parking-helper-panel');
        if (panel) {
          panel.classList.remove('collapsed');
        }
        // ÌòÑÏû¨ Ïû•ÏÜå Îç∞Ïù¥ÌÑ∞Î°ú Ìå®ÎÑê ÏóÖÎç∞Ïù¥Ìä∏
        if (currentPlaceId) {
          fetchParkingData(currentPlaceId);
        }
      } else if (request.type === 'SHOW_REVIEW_FORM') {
        // ÌåùÏóÖÏóêÏÑú Î¶¨Î∑∞ ÏûëÏÑ± ÏöîÏ≤≠
        console.log('Î¶¨Î∑∞ ÏûëÏÑ± Ìèº ÌëúÏãú ÏöîÏ≤≠ Î∞õÏùå');
        if (!uiInjected) {
          createParkingPanel();
        }
        const panel = document.getElementById('parking-helper-panel');
        if (panel) {
          panel.classList.remove('collapsed');
          // Î¶¨Î∑∞ ÏûëÏÑ± Ìèº ÌëúÏãú Í∏∞Îä• Ï∂îÍ∞Ä ÏòàÏ†ï
          const contentDiv = panel.querySelector('.ph-content');
          if (contentDiv) {
            contentDiv.innerHTML = `
              <div class="ph-review-form" style="padding: 20px;">
                <h3 style="margin: 0 0 15px 0; color: #333;">Î¶¨Î∑∞ ÏûëÏÑ±ÌïòÍ∏∞</h3>
                <p style="color: #666; font-size: 14px;">Ïù¥ Í∏∞Îä•ÏùÄ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏûÖÎãàÎã§.</p>
                <button onclick="window.location.reload()" style="
                  margin-top: 15px;
                  padding: 10px 20px;
                  background: #667eea;
                  color: white;
                  border: none;
                  border-radius: 6px;
                  cursor: pointer;
                ">ÎèåÏïÑÍ∞ÄÍ∏∞</button>
              </div>
            `;
          }
        }
      }
      
      return true;
    });

    // ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å ÌõÑ Ï¥àÍ∏∞Ìôî
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  },
});